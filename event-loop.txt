- overview of how event loop, worker thread, child process and cluster module work together in a Node.js application.
- **single-threaded app is actually leveraging the multi-threaded behavior of another process: the database**
ref : https://stackoverflow.com/a/34857298/25472984
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

Event Loop: At the core of Node.js is the event loop, which handles asynchronous operations like I/O tasks (e.g., reading files, network requests). -
The event loop allows Node.js to perform non-blocking I/O operations, meaning it can handle multiple operations without waiting for any to complete before moving to the next.

Worker Threads: For CPU-intensive tasks, such as heavy computations or large file processing, you can use worker threads. These threads run parallel to the main event loop,-
allowing you to offload heavy tasks and keep the main thread responsive. Worker threads are part of the worker_threads module.

Child Processes: For tasks that require running separate processes, like executing a command or running a script, you can use the child_process module.-
This is useful for tasks that can benefit from being isolated from the main Node.js process, like video encoding or other heavy operations.

Cluster Module: To handle a high number of requests, you can use the cluster module to fork multiple instances of your application. Each instance (worker) runs on a different CPU core, -
distributing the load and improving performance. The cluster module helps you utilize the full power of a multi-core system.

Difference between Worker Thread, Cluster, and Child Process{
    Worker Threads are threads within a single Node.js process, suitable for CPU-bound tasks within a single machine.
    Clusters are multiple instances of the entire Node.js process running separately, suitable for distributing workload across multiple cores or machines.
    Child Processes, as discussed earlier, are independent processes spawned by a Node.js process, useful for executing external commands or running other applications.
}

Here's a simplified example to demonstrate these concepts:


const cluster = require('cluster');
const http = require('http');
const { Worker } = require('worker_threads');
const { spawn } = require('child_process');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  // Fork workers
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`);
    cluster.fork(); // Replace the dead worker
  });
} else {
  // Workers can share any TCP connection
  http.createServer((req, res) => {
    if (req.url === '/compute') {
      // Offload heavy computation to a worker thread
      const worker = new Worker('./compute.js');
      worker.on('message', result => {
        res.writeHead(200);
        res.end(`Result: ${result}`);
      });
    } else if (req.url === '/process') {
      // Use child process to handle a task
      const child = spawn('some-command', ['arg1', 'arg2']);
      child.stdout.on('data', data => {
        res.writeHead(200);
        res.end(`Output: ${data}`);
      });
    } else {
      res.writeHead(200);
      res.end('Hello World');
    }
  }).listen(8000);
}


In this example:

The cluster module forks the master process to create multiple worker processes, each handling incoming HTTP requests.
When a request to /compute is received, a worker thread is created to handle the heavy computation task.
When a request to /process is received, a child process is spawned to execute a command.
Other requests are handled normally, showing the event loop's efficiency.
This setup helps you manage I/O, CPU-intensive tasks, and heavy processing efficiently, leveraging Node.js's full potential.