cap_theorem: {
    CAP Theorem: In a distributed database, only two out of three properties can be guaranteed: consistency, availability, partition tolerance.
    consistency: {
        All clients see the same data regardless of which node they connect to.
    },
    availability: {
        Every request receives a non-error response, but the response may not be the most recent data.
    },
    partition_tolerance: {
        The system continues to operate even if there are breaks in communication between nodes due to network or node failures.
    }
}
transactions: {
    Transactions guarantee ACID properties, which are crucial for many applications.
    atomicity: {
        All or nothing; ensures that all operations in a transaction are completed or none are.
    },
    consistency: {
        Ensures that the data is consistent before and after the transaction.
    },
    isolation: {
        Ensures that operations in a transaction are isolated from operations in other transactions.
    },
    durability: {
        Ensures that once a transaction is committed, its effects are permanently recorded in the database.
    }
}
sharding: {
    Provides horizontal scaling by distributing data across multiple shards.
    Manages large amounts of data by dividing it into smaller, more manageable pieces.
    according to the shard key on the collections it stored data across multiple servers so it will also make operations faster
}
replication: {
    Ensures redundancy and high availability by copying data across multiple servers.
    high availability on a failover
    durability/data safety
}
redundancy{
    ensuring data availability and fault tolerance through replication and redundancy mechanisms. 
    High Availability: Ensures that applications can continue to operate even if individual nodes or components fail.
    Data Protection: Reduces the risk of data loss by maintaining multiple copies of data across different nodes.
    Scalability: Supports horizontal scalability by adding more nodes to handle increased load and data volume.
}
clustering{
    deployment of multiple MongoDB instances together to provide high availability and fault tolerance.
    involves setting up replica sets to ensure data replications, high availability and failover capabilities.
    using replication and sharding together for high availability and consistency.
}
Aggregation operations process data records and return computed results.
$lookup: {
    Performs a left outer join with another collection in the same database.
}
$unwind: {
    Deconstructs an array field from the input documents to output a document for each element of the array.
}
$upsert 
Updates the documents that match the condition; otherwise, inserts the data if no match is found.
distinct: {
    Returns the distinct values of a field as an array.
}
Backup: Creates a backup of the database.
mongodump --out /path/to/backup

Restore: Restores the database from a backup.
mongorestore /path/to/backup

GridFS: {
    Manages large files exceeding 16MB by breaking them into smaller chunks.
    Stores and retrieves large files by splitting them into smaller parts.
}
indexes: {
    disadvantages: {
        Increased storage requirement.
        Slower write operations (like delete, update, insert) because indexes need to be updated.
        Additional CPU and memory usage.
    },
    advantages: {
        Faster read operations by allowing quick data retrieval.
        Efficiently supports sorting and range queries.
        Enhances the performance of queries that filter on indexed fields.
        Can enforce uniqueness on a field, ensuring data integrity.
    }
}
geospatial index{
    A geospatial index in MongoDB is a special type of index that allows for efficient querying of geographic data, such as locations defined by latitude and longitude.
     This type of index is useful for applications involving maps, location-based services, and geographic data analysis.
}
Capped Collections: {
    special type of collection with a fixed size that provide high-throughput operations by maintaining insert order.
    Fixed size, high-throughput insert operations, maintains the order of insertion.
}
MongoDB profiler: {
    Monitors and analyzes the performance of database operations.
    allows monitoring the performance of database operations.
}
BulkWrite: {
    operations allow performing multiple write operations at once in a single call.
    Executes multiple write operations in a single call for efficiency.
}
crud_operations: {
    create: {
        Creates a new document in the collection.
        db.collection.insertOne({})
    },
    read: {
        Reads documents from the collection.
        db.collection.find()
    },
    update: {
        Updates documents in the collection.
        db.collection.updateOne({}, { $set: {} })
    },
    delete: {
        Deletes documents from the collection.
        db.collection.deleteOne({})
    }
}
comparison_operators: {
    $eq: { /* Equal to */ },
    $ne: { /* Not equal to */ },
    $gt: { /* Greater than */ },
    $gte: { /* Greater than or equal to */ },
    $lt: { /* Less than */ },
    $lte: { /* Less than or equal to */ },
    $in: { /* In array */ },
    $nin: { /* Not in array */ }
};
logical_operators: {
    $and: { /* Logical AND */ },
    $or: { /* Logical OR */ },
    $not: { /* Logical NOT */ },
    $nor: { /* Logical NOR */ }
}
element_operators: {
    $exists: { /* Checks if a field exists */ },
    $type: { /* Checks the type of a field */ }
}
array_operators: {
    $all: { /* Matches arrays that contain all elements */ },
    $elemMatch: { /* Matches arrays that contain at least one element that matches all conditions */ },
    $size: { /* Matches arrays with a specified size */ }
}
evaluation_operators: {
    $mod: { /* Modulus operation */ },
    $regex: { /* Regular expression match */ },
    $text: { /* Text search */ },
    $where: { /* JavaScript expression */ }
}
-$elemmatch {
    The $elemMatch operator matches documents that contain an array field with at least one element that matches all the specified query criteria.
    db.collection.find({
        scores: { $elemMatch: { $gt: 80, $lt: 85 } }
    });
}
-$facet {
    The $facet stage allows you to perform multiple aggregation pipelines within a single stage, returning a document where each field contains the results of a separate pipeline.
    db.collection.aggregate([
        {
            $facet: {
                "categorizedByTags": [
                    { $unwind: "$tags" },
                    { $sortByCount: "$tags" }
                ],
                "categorizedByYear": [
                    { $match: { year: { $gt: 2000 } } },
                    { $bucket: { groupBy: "$year", boundaries: [2000, 2010, 2020], default: "Other" } }
                ]
            }
        }
    ]);
}
-$let {
    The $let operator defines variables for use within the scope of a sub-expression and returns the result of the sub-expression.
    db.collection.aggregate([
        {
            $project: {
                total: {
                    $let: {
                        vars: {
                            price: "$price",
                            tax: "$tax"
                        },
                        in: { $add: ["$$price", "$$tax"] }
                    }
                }
            }
        }
    ]);
}
-$cond {
    The $cond operator evaluates a boolean expression to return one of two specified values.
    db.collection.aggregate([
    {
        $project: {
            status: {
                $cond: { if: { $gte: ["$score", 80] }, then: "Pass", else: "Fail" }
            }
        }
    }
]);
}
db.employees.updateMany(
  { dep: 'eng' },
  { $mul: { salary: 1.1 } }
);
db.employees.updateMany(
  { dep: 'eng' },
  { $mul: { salary: 0.9 } }
);
view{
    Views in MongoDB are virtual collections that present the results of an aggregation pipeline as if they were documents in a collection.
    They are defined with an aggregation pipeline, which determines how data from existing collections is transformed or aggregated.    
}
explain(){
    explain() method provides information about the query execution plan and statistics, which can help analyze and optimize query performance
    db.employees.find().explain()
}
fulltext search{
    Full-text search in MongoDB allows you to perform text-based searches across string fields in your documents. 
}
$out{
    for storing the results of complex aggregation pipelines into collections,
    db.sourceCollection.aggregate([
      { $match: { status: "active" } },
      { $group: { _id: "$category", totalAmount: { $sum: "$amount" } } },
      { $out: "summaryCollection" }
    ]);
}
each skill and the number {
    db.employees.aggregate([{$unwind:"$skills"},{$group:{_id:"$skills",count:{$sum:1}}}])
}
developers who know more than 4 skills {
    db.employees.aggregate([{$project:{name:1,numOfSkills:{$size:"$skills"}}},{$match:{numOfSkills:{$gte:3}}}])
}
limiting size of collection{
    db.createCollection("log", {
      capped: true,
      size: 5242880,  // Size limit in bytes (e.g., 5MB)
      max: 5000       // Maximum number of documents (optional)
    })

}

learn regex patterns, '
